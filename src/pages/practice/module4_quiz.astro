---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Module 4 Quiz: Chemical Bonding">
    <div class="container">
        <h1>Module 4 Quiz: Chemical Bonding</h1>
        
        <!-- Email Section -->
        <div id="email-section">
            <h2>Enter your email to start the quiz</h2>
            <p>Your email is optional but recommended to receive your results.</p>
            <div class="email-input">
                <input type="email" id="email" placeholder="Enter your email (optional)">
                <label>
                    <input type="checkbox" id="save-results" checked>
                    Send results to my email
                </label>
            </div>
            <button id="start-quiz" class="btn">Start Quiz</button>
        </div>

        <!-- Quiz Container -->
        <div id="quiz-container" style="display: none;">
            <div class="progress-container">
                <div class="progress-bar">
                    <div class="progress" id="progress"></div>
                </div>
                <span id="question-number"></span>
            </div>

            <div id="question-text"></div>
            
            <!-- Multiple Choice Options -->
            <div class="options"></div>
            
            <!-- Atom Builder -->
            <div id="atom-builder-container" style="display: none;">
                <div class="atom-inputs">
                    <div class="input-group">
                        <label for="protons">Protons:</label>
                        <input type="number" id="protons" min="0">
                    </div>
                    <div class="input-group">
                        <label for="neutrons">Neutrons:</label>
                        <input type="number" id="neutrons" min="0">
                    </div>
                    <div class="input-group">
                        <label for="electrons">Electrons:</label>
                        <input type="number" id="electrons" min="0">
                    </div>
                </div>
                <button id="check-atom" class="btn">Check Atom</button>
            </div>

            <div id="feedback"></div>
            
            <!-- Navigation -->
            <div class="navigation">
                <button id="prev-question" class="btn" disabled>Previous</button>
                <button id="next-question" class="btn" disabled>Next</button>
                <button id="submit-quiz" class="btn" style="display: none;">Submit Quiz</button>
            </div>
        </div>

        <!-- Results Section -->
        <div id="results" style="display: none;">
            <h2>Quiz Results</h2>
            <p id="score"></p>
            <div id="email-status"></div>
            <div id="incorrect-answers"></div>
            <button id="download-results" class="btn">Download Results</button>
            <button id="restart-quiz" class="btn" onclick="window.location.reload()">Restart Quiz</button>
        </div>
    </div>
</Layout>

<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }
    .progress-container {
        margin: 20px 0;
    }

    .progress-bar {
        width: 100%;
        height: 20px;
        background-color: #f0f0f0;
        border-radius: 10px;
        overflow: hidden;
    }

    .progress {
        width: 0%;
        height: 100%;
        background-color: #4CAF50;
        transition: width 0.3s ease;
    }

    #question-number {
        display: block;
        text-align: center;
        margin-top: 10px;
        font-weight: bold;
    }
    .feedback {
        margin: 20px 0;
        padding: 15px;
        border-radius: 5px;
        display: none;
    }
    .feedback.correct {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        display: block;
    }
    .feedback.incorrect {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        display: block;
    }
    .controls {
        margin-top: 20px;
        display: flex;
        gap: 10px;
    }
    .control-button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        background: #007bff;
        color: white;
        cursor: pointer;
        transition: background 0.2s;
    }
    .control-button:hover {
        background: #0056b3;
    }
    .control-button:disabled {
        background: #ccc;
        cursor: not-allowed;
    }
    .email-status {
        margin: 10px 0;
        padding: 10px;
        border-radius: 5px;
        display: none;
    }
    .email-status.success {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }
    .email-status.error {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }
    .result-buttons {
        margin-top: 20px;
        display: flex;
        gap: 10px;
    }
    .wrong-answer {
        color: #721c24;
    }
    .right-answer {
        color: #155724;
        font-weight: bold;
    }
    .atom-inputs {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-bottom: 15px;
        flex-wrap: wrap;
    }
    .input-group {
        display: flex;
        flex-direction: column;
        gap: 5px;
        min-width: 120px;
        max-width: 150px;
    }
    .input-group label {
        font-weight: bold;
        text-align: center;
    }
    .input-group input {
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        text-align: center;
        width: 100%;
    }
    .options {
        display: flex !important;
        flex-direction: column !important;
        gap: 10px;
        margin: 20px 0;
        width: 100%;
        align-items: stretch;
    }
    .option-button {
        width: 100% !important;
        text-align: left;
        padding: 12px 15px;
        border: 2px solid #ddd;
        border-radius: 5px;
        background: white;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 1em;
        line-height: 1.4;
        display: block !important;
        margin-bottom: 0;
        float: none !important;
        clear: both;
    }
    .option-button:hover:not(:disabled) {
        border-color: #007bff;
        background: #f8f9fa;
    }
    .option-button.correct {
        border-color: #28a745;
        background: #d4edda;
    }
    .option-button.incorrect {
        border-color: #dc3545;
        background: #f8d7da;
    }
    #quiz-container {
        width: 100%;
        margin-top: 20px;
        position: relative;
    }
    #quiz-container.active {
        display: block !important;
    }
    #question-text {
        font-size: 1.2em;
        margin-bottom: 20px;
        line-height: 1.5;
    }
    .options {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin: 20px 0;
        width: 100%;
    }
    .option-button {
        width: 100%;
        padding: 12px 15px;
        border: 2px solid #ddd;
        border-radius: 5px;
        background: white;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: left;
        font-size: 1em;
        line-height: 1.4;
    }
    .option-button:hover:not(:disabled) {
        border-color: #007bff;
        background: #f8f9fa;
    }
    .option-button.correct {
        border-color: #28a745;
        background: #d4edda;
    }
    .option-button.incorrect {
        border-color: #dc3545;
        background: #f8d7da;
    }
    .navigation {
        display: flex;
        justify-content: center;
        gap: 15px;
        margin-top: 20px;
        width: 100%;
    }

    .navigation button {
        flex: 0 0 auto;
        min-width: 100px;
    }
    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        background-color: #007bff;
        color: white;
        cursor: pointer;
        transition: background-color 0.3s;
    }
    .btn:hover:not(:disabled) {
        background-color: #0056b3;
    }
    .btn:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }
    #atom-builder-container {
        margin: 20px 0;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }
    #feedback {
        margin: 20px 0;
        padding: 15px;
        border-radius: 5px;
        font-size: 1.1em;
        line-height: 1.4;
    }
    #feedback.correct {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }
    #feedback.incorrect {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js" is:inline></script>
<script is:inline>
    // Wait for EmailJS to load before initializing
    window.onload = function() {
        try {
            emailjs.init("la6DVzxI7W2gVEkX6");
            
            // Initialize quiz state
            document.getElementById('quiz-container').style.display = 'none';
            document.getElementById('results').style.display = 'none';
            document.getElementById('atom-builder-container').style.display = 'none';
            
            // Add event listeners
            document.getElementById('start-quiz').addEventListener('click', startQuiz);
            document.getElementById('download-results').addEventListener('click', downloadResults);
        } catch (err) {
            console.error('Error initializing EmailJS:', err);
        }
    };

    // Quiz questions array
    window.questions = [
        {
            type: "multiple-choice",
            question: "What type of bond forms between atoms that share electrons?",
            options: [
                "Covalent bond",
                "Ionic bond",
                "Metallic bond",
                "Hydrogen bond"
            ],
            correctAnswer: 0,
            explanation: "A covalent bond forms when atoms share electrons between them, creating a stable electron configuration."
        },
        {
            type: "multiple-choice",
            question: "Which of the following best describes an ionic bond?",
            options: [
                "A bond formed by sharing electrons",
                "A bond formed by the transfer of electrons from one atom to another",
                "A bond formed between metal atoms",
                "A bond formed between molecules"
            ],
            correctAnswer: 1,
            explanation: "An ionic bond is formed when one or more electrons are transferred from one atom to another, resulting in the formation of ions with opposite charges."
        },
        {
            type: "atom-builder",
            question: "Build a neutral atom of Lithium (Li). Set the correct number of protons, neutrons, and electrons.",
            correctValues: {
                protons: 3,
                neutrons: 4,
                electrons: 3
            }
        },
        {
            type: "multiple-choice",
            question: "What determines the chemical properties of an element?",
            options: [
                "The number of neutrons",
                "The number of protons",
                "The number of electrons in the outer shell",
                "The total atomic mass"
            ],
            correctAnswer: 2,
            explanation: "The number of electrons in the outer shell of an atom determines its chemical properties, as it affects the atom's ability to form bonds with other atoms."
        },
        {
            type: "multiple-choice",
            question: "Which of these represents a polar covalent bond?",
            options: [
                "H-H",
                "Na-Cl",
                "H-O",
                "C-C"
            ],
            correctAnswer: 2,
            explanation: "A polar covalent bond is a type of covalent bond where the electrons are not shared equally between the atoms, resulting in a partial positive charge on one atom and a partial negative charge on the other."
        },
        {
            type: "multiple-choice",
            question: "What happens to electrons in metallic bonding?",
            options: [
                "They are transferred between atoms",
                "They are shared between specific atoms",
                "They form a 'sea' of electrons",
                "They are completely lost"
            ],
            correctAnswer: 2,
            explanation: "In metallic bonding, the electrons are delocalized and form a 'sea' of electrons that surrounds the positively charged metal ions."
        },
        {
            type: "multiple-choice",
            question: "What is a chemical formula?",
            options: [
                "A list of ingredients in a recipe",
                "A notation indicating the elements and their ratios in a compound",
                "A mathematical equation",
                "A diagram of an atom"
            ],
            correctAnswer: 1,
            explanation: "A chemical formula is a notation that indicates the elements present in a compound and their ratios."
        },
        {
            type: "multiple-choice",
            question: "In a balanced chemical equation, what must be equal on both sides?",
            options: [
                "The number of molecules",
                "The number of atoms of each element",
                "The number of reactants",
                "The number of products"
            ],
            correctAnswer: 1,
            explanation: "In a balanced chemical equation, the number of atoms of each element must be equal on both the reactant and product sides."
        },
        {
            type: "multiple-choice",
            question: "What does the subscript in a chemical formula indicate?",
            options: [
                "The atomic number",
                "The number of atoms of that element",
                "The atomic mass",
                "The charge of the ion"
            ],
            correctAnswer: 1,
            explanation: "The subscript in a chemical formula indicates the number of atoms of that element present in the compound."
        },
        {
            type: "multiple-choice",
            question: "What is the most stable electron configuration for atoms?",
            options: [
                "Having 4 valence electrons",
                "Having a full set of electrons in their highest energy level",
                "Having no valence electrons",
                "Having an empty outer shell"
            ],
            correctAnswer: 1,
            explanation: "The most stable electron configuration for atoms is having a full set of electrons in their highest energy level, which is similar to the electron configuration of noble gases."
        },
        {
            type: "atom-builder",
            question: "Build a neutral carbon dioxide (CO₂) molecule:",
            correctValues: {
                protons: 6,
                neutrons: 6,
                electrons: 6
            }
        },
        {
            type: "multiple-choice",
            question: "What makes water a polar molecule?",
            options: [
                "Its linear shape",
                "Its bent shape and unequal electron sharing",
                "Its high boiling point",
                "Its ability to dissolve salt"
            ],
            correctAnswer: 1,
            explanation: "Water is a polar molecule due to its bent shape and unequal electron sharing between the oxygen and hydrogen atoms, resulting in a net dipole moment."
        },
        {
            type: "multiple-choice",
            question: "What does an electron dot diagram show?",
            options: [
                "Only the nucleus of an atom",
                "All electrons in an atom",
                "Only the valence electrons of an atom",
                "Only the protons in an atom"
            ],
            correctAnswer: 2,
            explanation: "An electron dot diagram shows all the electrons in an atom, with the valence electrons represented by dots around the symbol of the element."
        },
        {
            type: "multiple-choice",
            question: "In a triple covalent bond, how many pairs of electrons are shared between atoms?",
            options: [
                "One pair",
                "Two pairs",
                "Three pairs",
                "Four pairs"
            ],
            correctAnswer: 2,
            explanation: "In a triple covalent bond, three pairs of electrons are shared between the atoms, resulting in a strong and stable bond."
        },
        {
            type: "multiple-choice",
            question: "What type of molecule is carbon dioxide (CO₂)?",
            options: [
                "Polar with single bonds",
                "Nonpolar with double bonds",
                "Polar with double bonds",
                "Nonpolar with single bonds"
            ],
            correctAnswer: 1,
            explanation: "Carbon dioxide (CO₂) is a polar molecule with single bonds, as the oxygen atoms have a slightly negative charge and the carbon atom has a slightly positive charge."
        },
        {
            type: "multiple-choice",
            question: "Which element can form up to four covalent bonds, making it essential for life?",
            options: [
                "Hydrogen",
                "Oxygen",
                "Carbon",
                "Nitrogen"
            ],
            correctAnswer: 2,
            explanation: "Carbon can form up to four covalent bonds, making it essential for life as it can form complex molecules such as carbohydrates, proteins, and fats."
        },
        {
            type: "atom-builder",
            question: "Build a neutral nitrogen molecule (N₂):",
            correctValues: {
                protons: 7,
                neutrons: 7,
                electrons: 7
            }
        }
    ];

    // Quiz state in window scope to match Module 9
    window.currentQuestion = 0;
    window.userAnswers = new Array(window.questions.length).fill(null);
    window.questionAttempts = new Array(window.questions.length).fill(0);
    window.userEmail = '';

    // Initialize quiz state
    document.getElementById('quiz-container').style.display = 'none';
    document.getElementById('results').style.display = 'none';
    document.getElementById('atom-builder-container').style.display = 'none';

    function startQuiz() {
        // Save email if provided
        const emailInput = document.getElementById('email');
        if (emailInput.value) {
            window.userEmail = emailInput.value;
        }
        
        // Hide email section and show quiz
        document.getElementById('email-section').style.display = 'none';
        const quizContainer = document.getElementById('quiz-container');
        quizContainer.style.display = 'block';
        document.getElementById('results').style.display = 'none';
        
        // Initialize quiz state
        window.currentQuestion = 0;
        window.userAnswers = new Array(window.questions.length).fill(null);
        window.questionAttempts = new Array(window.questions.length).fill(0);
        
        // Update progress bar
        const progress = document.getElementById('progress');
        progress.style.width = '0%';
        
        // Show first question
        showQuestion();
        updateNavigationButtons();
    }

    // Add event listeners for navigation
    document.getElementById('prev-question').addEventListener('click', previousQuestion);
    document.getElementById('next-question').addEventListener('click', nextQuestion);
    document.getElementById('submit-quiz').addEventListener('click', submitQuiz);
    document.getElementById('check-atom').addEventListener('click', checkAtomAnswer);

    function nextQuestion() {
        if (window.currentQuestion < window.questions.length - 1) {
            window.currentQuestion++;
            showQuestion();
        }
    }

    function previousQuestion() {
        if (window.currentQuestion > 0) {
            window.currentQuestion--;
            showQuestion();
        }
    }

    function showQuestion() {
        const feedback = document.getElementById('feedback');
        feedback.textContent = '';
        feedback.className = 'feedback';
        
        const optionsContainer = document.querySelector('.options');
        optionsContainer.innerHTML = '';
        optionsContainer.style.display = 'none';
        
        const atomBuilder = document.getElementById('atom-builder-container');
        atomBuilder.style.display = 'none';
        
        // Reset atom builder inputs
        const protons = document.getElementById('protons');
        const neutrons = document.getElementById('neutrons');
        const electrons = document.getElementById('electrons');
        const checkAtomBtn = document.getElementById('check-atom');
        
        protons.value = '';
        neutrons.value = '';
        electrons.value = '';
        protons.disabled = false;
        neutrons.disabled = false;
        electrons.disabled = false;
        checkAtomBtn.disabled = false;
        
        // Now show the current question
        const question = window.questions[window.currentQuestion];
        document.getElementById('question-number').textContent = `Question ${window.currentQuestion + 1} of ${window.questions.length}`;
        document.getElementById('question-text').textContent = question.question;
        
        if (question.type === "multiple-choice") {
            optionsContainer.style.display = 'block';
            question.options.forEach((option, index) => {
                const button = document.createElement('button');
                button.className = 'option-button';
                button.textContent = option;
                button.onclick = () => selectAnswer(index);
                optionsContainer.appendChild(button);
            });
            
            // Restore previous state if answered
            if (window.userAnswers[window.currentQuestion] !== null) {
                const selectedIndex = window.userAnswers[window.currentQuestion];
                const isCorrect = selectedIndex === question.correctAnswer;
                const buttons = optionsContainer.querySelectorAll('.option-button');
                
                buttons[selectedIndex].classList.add(isCorrect ? 'correct' : 'incorrect');
                buttons.forEach(button => button.disabled = true);
                
                feedback.textContent = isCorrect ? 
                    'Correct! ' + question.explanation : 
                    `Incorrect. The correct answer is: ${question.options[question.correctAnswer]}. ${question.explanation}`;
                feedback.className = 'feedback ' + (isCorrect ? 'correct' : 'incorrect');
            }
        } else if (question.type === "atom-builder") {
            atomBuilder.style.display = 'block';
            
            // Only restore previous state if this question was answered
            if (window.userAnswers[window.currentQuestion] !== null) {
                const isCorrect = window.userAnswers[window.currentQuestion] === true;
                const attempts = window.questionAttempts[window.currentQuestion] || 0;
                
                if (isCorrect || attempts >= 2) {
                    protons.value = question.correctValues.protons;
                    neutrons.value = question.correctValues.neutrons;
                    electrons.value = question.correctValues.electrons;
                    
                    protons.disabled = true;
                    neutrons.disabled = true;
                    electrons.disabled = true;
                    checkAtomBtn.disabled = true;
                    
                    feedback.textContent = isCorrect ? 
                        'Correct! ' + (question.explanation || '') : 
                        `Incorrect. The correct values are: Protons: ${question.correctValues.protons}, Neutrons: ${question.correctValues.neutrons}, Electrons: ${question.correctValues.electrons}.` + (question.explanation ? ` ${question.explanation}` : '');
                    feedback.className = 'feedback ' + (isCorrect ? 'correct' : 'incorrect');
                }
            }
        }
        
        updateProgressBar();
        updateNavigationButtons();
    }

    function selectAnswer(index) {
        const question = window.questions[window.currentQuestion];
        if (question.type !== "multiple-choice") return;
        
        if (!window.questionAttempts[window.currentQuestion]) window.questionAttempts[window.currentQuestion] = 0;
        if (window.questionAttempts[window.currentQuestion] >= 2) return;
        
        window.questionAttempts[window.currentQuestion]++;
        window.userAnswers[window.currentQuestion] = index;
        
        const isCorrect = index === question.correctAnswer;
        const feedback = document.getElementById('feedback');
        const options = document.querySelectorAll('.option-button');
        
        // Reset all options
        options.forEach(option => {
            option.classList.remove('correct', 'incorrect');
            option.disabled = false;
        });
        
        // Style selected option
        options[index].classList.add(isCorrect ? 'correct' : 'incorrect');
        
        // Show feedback
        feedback.textContent = isCorrect ? 
            'Correct! ' + question.explanation : 
            (window.questionAttempts[window.currentQuestion] >= 2 ? 
                `Incorrect. The correct answer is: ${question.options[question.correctAnswer]}. ${question.explanation}` : 
                'Incorrect. Try again.');
        feedback.className = 'feedback ' + (isCorrect ? 'correct' : 'incorrect');
        
        // Disable all options if correct or max attempts reached
        if (isCorrect || window.questionAttempts[window.currentQuestion] >= 2) {
            options.forEach(option => option.disabled = true);
            if (isCorrect) {
                options[question.correctAnswer].classList.add('correct');
            }
        }
        
        updateNavigationButtons();
    }

    function checkAtomAnswer() {
        const question = window.questions[window.currentQuestion];
        if (question.type !== "atom-builder") return;
        
        if (!window.questionAttempts[window.currentQuestion]) window.questionAttempts[window.currentQuestion] = 0;
        if (window.questionAttempts[window.currentQuestion] >= 2) return;
        
        window.questionAttempts[window.currentQuestion]++;
        
        const protons = parseInt(document.getElementById('protons').value);
        const neutrons = parseInt(document.getElementById('neutrons').value);
        const electrons = parseInt(document.getElementById('electrons').value);
        
        const isCorrect = protons === question.correctValues.protons && 
                         neutrons === question.correctValues.neutrons && 
                         electrons === question.correctValues.electrons;
        
        const feedback = document.getElementById('feedback');
        feedback.className = 'feedback ' + (isCorrect ? 'correct' : 'incorrect');
        
        if (isCorrect) {
            feedback.textContent = 'Correct! ' + (question.explanation || '');
            window.userAnswers[window.currentQuestion] = true;
            
            // Disable inputs on correct answer
            document.getElementById('protons').disabled = true;
            document.getElementById('neutrons').disabled = true;
            document.getElementById('electrons').disabled = true;
            document.getElementById('check-atom').disabled = true;
        } else {
            if (window.questionAttempts[window.currentQuestion] >= 2) {
                feedback.textContent = `Incorrect. The correct values are: Protons: ${question.correctValues.protons}, Neutrons: ${question.correctValues.neutrons}, Electrons: ${question.correctValues.electrons}.` + (question.explanation ? ` ${question.explanation}` : '');
                
                // Show correct values and disable inputs after max attempts
                document.getElementById('protons').value = question.correctValues.protons;
                document.getElementById('neutrons').value = question.correctValues.neutrons;
                document.getElementById('electrons').value = question.correctValues.electrons;
                
                document.getElementById('protons').disabled = true;
                document.getElementById('neutrons').disabled = true;
                document.getElementById('electrons').disabled = true;
                document.getElementById('check-atom').disabled = true;
            } else {
                feedback.textContent = 'Incorrect. Try again.';
            }
        }
        
        updateNavigationButtons();
    }

    function updateProgressBar() {
        const progress = document.querySelector('.progress');
        const progressPercentage = ((window.currentQuestion + 1) / window.questions.length) * 100;
        progress.style.width = `${progressPercentage}%`;
    }

    function updateNavigationButtons() {
        const prevBtn = document.getElementById('prev-question');
        const nextBtn = document.getElementById('next-question');
        const submitBtn = document.getElementById('submit-quiz');
        
        // Always allow navigation to previous questions
        prevBtn.disabled = window.currentQuestion === 0;
        
        // Enable next/submit button if:
        // 1. Current question is answered correctly, or
        // 2. Current question has reached max attempts (2), or
        // 3. Current question is multiple choice and has been answered
        const currentQuestion = window.questions[window.currentQuestion];
        const currentAttempts = window.questionAttempts[window.currentQuestion] || 0;
        const isAnswered = window.userAnswers[window.currentQuestion] !== null;
        const isCorrect = currentQuestion.type === "multiple-choice" ? 
            window.userAnswers[window.currentQuestion] === currentQuestion.correctAnswer :
            window.userAnswers[window.currentQuestion] === true;
            
        const canProceed = isCorrect || currentAttempts >= 2 || (currentQuestion.type === "multiple-choice" && isAnswered);
        nextBtn.disabled = !canProceed;
        
        // Show submit button on last question if answered
        if (window.currentQuestion === window.questions.length - 1) {
            nextBtn.style.display = 'none';
            submitBtn.style.display = 'block';
            submitBtn.disabled = !canProceed; // Use same conditions as next button
        } else {
            nextBtn.style.display = 'block';
            submitBtn.style.display = 'none';
        }
        
        // Update progress bar
        updateProgressBar();
    }

    function submitQuiz() {
        document.getElementById('quiz-container').style.display = 'none';
        document.getElementById('results').style.display = 'block';
        
        const score = window.userAnswers.filter((answer, index) => answer === window.questions[index].correctAnswer).length;
        const scorePercentage = (score / window.questions.length) * 100;
        document.getElementById('score').textContent = `Your score: ${score} out of ${window.questions.length} (${scorePercentage}%)`;
        
        if (document.getElementById('save-results').checked && window.userEmail) {
            sendEmail(window.userEmail, score, window.questions.length);
        }
        
        displayIncorrectAnswers();
    }

    function sendEmail(email, score, total) {
        const emailStatus = document.getElementById('email-status');
        emailStatus.textContent = 'Sending results...';
        emailStatus.style.display = 'block';

        const templateParams = {
            user_email: email,
            quiz_name: "Module 4: Chemical Bonding",
            score: `${score}/${total}`,
            percentage: ((score / total) * 100).toFixed(1) + "%"
        };

        emailjs.send("service_ot1jg6s", "template_v678xjf", templateParams)
            .then(() => {
                emailStatus.textContent = "Results sent successfully!";
                emailStatus.className = "email-status success";
                emailStatus.style.display = "block";
            })
            .catch(() => {
                emailStatus.textContent = "Failed to send results. Please try again.";
                emailStatus.className = "email-status error";
                emailStatus.style.display = "block";
            });
    }

    function displayIncorrectAnswers() {
        const incorrectAnswersDiv = document.getElementById('incorrect-answers');
        incorrectAnswersDiv.innerHTML = '<h3>Question Review:</h3>';
        
        window.questions.forEach((question, index) => {
            const userAnswer = window.userAnswers[index];
            const isCorrect = userAnswer === question.correctAnswer;
            
            incorrectAnswersDiv.innerHTML += `
                <div class="question-review">
                    <p><strong>Question ${index + 1}:</strong> ${question.question}</p>
                    <p class="${isCorrect ? 'right-answer' : 'wrong-answer'}">
                        ${isCorrect ? '✓ Correct' : '✗ Incorrect'}
                    </p>
                    ${!isCorrect && question.type === 'multiple-choice' ? 
                        `<p>Your answer: ${question.options[userAnswer]}<br>
                         Correct answer: ${question.options[question.correctAnswer]}</p>` : ''}
                </div>`;
        });
    }

    function downloadResults() {
        const results = window.questions.map((question, index) => {
            const userAnswer = window.userAnswers[index];
            return {
                question: question.question,
                userAnswer: question.type === 'multiple-choice' ? question.options[userAnswer] : 'Atom Builder Question',
                correctAnswer: question.type === 'multiple-choice' ? question.options[question.correctAnswer] : 'See correct values in feedback',
                isCorrect: userAnswer === question.correctAnswer
            };
        });

        const resultsText = `Module 4 Quiz Results\n\n` +
            `Score: ${window.userAnswers.filter((answer, index) => answer === window.questions[index].correctAnswer).length} out of ${window.questions.length} (${(window.userAnswers.filter((answer, index) => answer === window.questions[index].correctAnswer).length/window.questions.length*100).toFixed(1)}%)\n\n` +
            results.map((result, index) => 
                `Question ${index + 1}: ${result.question}\n` +
                `Your Answer: ${result.userAnswer}\n` +
                `Correct Answer: ${result.correctAnswer}\n` +
                `Status: ${result.isCorrect ? 'Correct' : 'Incorrect'}\n`
            ).join('\n');

        const blob = new Blob([resultsText], { type: 'text/plain' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'module4_quiz_results.txt';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
    }
</script>
