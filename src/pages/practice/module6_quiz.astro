---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Physical Science Module 6 Quiz">
    <div class="container">
        <h1>Physical Science Module 6 Quiz</h1>
        
        <div class="email-input" id="email-section">
            <label for="email">Enter your email (optional):</label>
            <input type="email" id="email" placeholder="your.email@example.com">
            <div>
                <input type="checkbox" id="save-results" checked>
                <label for="save-results">Save results and send to instructor</label>
            </div>
            <button class="control-button" id="start-quiz">Start Quiz</button>
        </div>

        <div id="quiz-container" style="display: none;">
            <div class="progress-bar">
                <div class="fill"></div>
            </div>
            <div id="question-number"></div>
            <div id="question-text"></div>
            <div class="options"></div>
            <div id="feedback" class="feedback"></div>
            <div class="controls">
                <button id="prevBtn" class="control-button" onclick="previousQuestion()">Previous Question</button>
                <button id="nextBtn" class="control-button" onclick="nextQuestion()">Next Question</button>
                <button id="submitBtn" class="control-button" onclick="submitQuiz()" style="display: none;">Submit Quiz</button>
            </div>
        </div>

        <div id="results" style="display: none;">
            <h2>Quiz Results</h2>
            <div id="score"></div>
            <div id="email-status" class="email-status"></div>
            <div id="incorrect-answers"></div>
            <div class="result-buttons">
                <button id="download-results" class="control-button">Download Results</button>
                <button id="restart-quiz" class="control-button" onclick="window.location.reload()">Restart Quiz</button>
            </div>
        </div>
    </div>

<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .quiz-container {
        background-color: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .question-container {
        margin-bottom: 20px;
    }

    #question-number {
        font-size: 1.2em;
        color: #666;
        margin-bottom: 10px;
    }

    #question-text {
        font-size: 1.4em;
        margin-bottom: 20px;
        color: #333;
    }

    .options {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin: 20px 0;
    }

    .option-button {
    background-color: #f8f9fa;
    border: 2px solid #dee2e6;
    border-radius: 8px;
    padding: 15px 20px;
    font-size: 16px;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: left;
    width: 100%;
}

.option-button:hover {
    background-color: #e9ecef;
    border-color: #adb5bd;
}

.option-button:disabled {
    cursor: not-allowed;
    opacity: 0.6;
}

.option-button.selected {
    background-color: #cce5ff;
    border-color: #0066cc;
}

.option-button.correct {
    background-color: #d4edda;
    border-color: #28a745;
    color: #155724;
}

.option-button.incorrect {
    background-color: #f8d7da;
    border-color: #dc3545;
    color: #721c24;
}
    .feedback {
        margin: 15px 0;
        padding: 15px;
        border-radius: 8px;
        display: none;
    }

    .feedback.success {
        background-color: #e8f5e9;
        border: 1px solid #4CAF50;
        color: #2e7d32;
    }

    .feedback.error {
        background-color: #ffebee;
        border: 1px solid #f44336;
        color: #c62828;
    }

    .navigation {
        display: flex;
        gap: 10px;
        margin-top: 20px;
        justify-content: space-between;
    }

    .control-button {
        padding: 12px 24px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1.1em;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .control-button:hover:not(:disabled) {
        background-color: #45a049;
    }

    .control-button:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
    }

    /* Start screen styles */
    #start-screen {
        text-align: center;
        padding: 40px 20px;
    }

    #start-screen h2 {
        color: #333;
        margin-bottom: 20px;
    }

    #start-screen p {
        color: #666;
        margin-bottom: 30px;
        font-size: 1.1em;
    }

    /* Progress bar styles */
    .progress-container {
        width: 100%;
        height: 8px;
        background-color: #f0f0f0;
        border-radius: 4px;
        margin-bottom: 20px;
        overflow: hidden;
    }

    .progress {
        height: 100%;
        background-color: #4CAF50;
        border-radius: 4px;
        transition: width 0.3s ease;
    }

    /* Results styles */
    #results {
        padding: 20px;
    }

    #results h2 {
        color: #333;
        margin-bottom: 20px;
    }

    #score {
        font-size: 1.2em;
        margin-bottom: 20px;
    }

    .question-result {
        margin-bottom: 20px;
        padding: 15px;
        border-radius: 8px;
        background-color: #fff;
        border: 1px solid #e0e0e0;
    }

    .question-result.incorrect {
        border-color: #f44336;
    }

    .reference {
        margin-top: 10px;
        font-style: italic;
        color: #666;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js" is:inline></script>
<script is:inline>
    // Wait for EmailJS to load before initializing
    window.onload = function() {
        try {
            emailjs.init("la6DVzxI7W8gVEkX6");
        } catch (err) {
            console.error('Error initializing EmailJS:', err);
        }
    };

    // Define questions first
    const questions = [
        {
            question: "A car and a truck are traveling north on a highway. The truck has a speed of 45 mi/h and the car has a speed of 57 mi/h. If the truck is ahead of the car, what is their relative velocity?",
            options: [
                "12 mi/h north",
                "102 mi/h north",
                "12 mi/h south",
                "102 mi/h south"
            ],
            correctAnswer: 0,
            explanation: "When objects travel in the same direction, relative speed is found by subtracting their speeds. Since the car is moving faster and is behind the truck, it is approaching the truck at 57 - 45 = 12 mi/h north."
        },
        {
            question: "A train takes a long time to stop. If a train is traveling at 30 miles per hour south and takes 12 minutes to come to a stop, what is the train's acceleration?",
            options: [
                "-0.042 mi/h/s south",
                "-2.5 mi/h/min south",
                "-0.042 mi/h/s north",
                "-2.5 mi/h/min north"
            ],
            correctAnswer: 1,
            explanation: "Acceleration = change in velocity / time. The train goes from 30 mi/h to 0 mi/h in 12 minutes, so acceleration = -30 mi/h / 12 min = -2.5 mi/h/min south. The negative sign and direction indicate deceleration."
        },
        {
            question: "If an object is moving with a constant velocity, what do you know about its acceleration?",
            options: [
                "The acceleration must be increasing",
                "The acceleration must be decreasing",
                "The acceleration must be zero",
                "The acceleration must be constant but not zero"
            ],
            correctAnswer: 2,
            explanation: "When velocity is constant (not changing in speed or direction), acceleration is zero because acceleration is the rate of change of velocity."
        },
        {
            question: "What is a frame of reference?",
            options: [
                "A point against which motion is measured",
                "The speed of an object",
                "The direction of motion",
                "The time taken to travel"
            ],
            correctAnswer: 0,
            explanation: "A frame of reference is a point or system used to specify the position and motion of objects. Motion is always measured relative to a frame of reference."
        },
        {
            question: "A boat is traveling downstream on a quiet river with a speed of 8.0 m/s, and another boat is traveling with a speed of 10.0 m/s upstream. What is their relative speed?",
            options: [
                "2.0 m/s",
                "18.0 m/s",
                "80.0 m/s",
                "-18.0 m/s"
            ],
            correctAnswer: 1,
            explanation: "When objects travel in opposite directions, their relative speed is the sum of their individual speeds: 8.0 m/s + 10.0 m/s = 18.0 m/s"
        },
        {
            question: "A sports car goes from a velocity of zero to a velocity of 12 meters per second east in 2 seconds. What is the car's acceleration?",
            options: [
                "6 m/s² east",
                "24 m/s² east",
                "6 m/s² west",
                "24 m/s² west"
            ],
            correctAnswer: 0,
            explanation: "Acceleration = change in velocity / time = (12 m/s - 0 m/s) / 2 s = 6 m/s² east"
        },
        {
            question: "What are the units of acceleration?",
            options: [
                "Meters (m)",
                "Meters per second (m/s)",
                "Meters per second squared (m/s²)",
                "Kilometers per hour (km/h)"
            ],
            correctAnswer: 2,
            explanation: "Acceleration units are distance divided by time squared, such as meters per second squared (m/s²)."
        },
        {
            question: "When two objects travel in opposite directions, how do you find their relative speed?",
            options: [
                "Multiply their individual speeds",
                "Subtract their individual speeds",
                "Add their individual speeds",
                "Divide their individual speeds"
            ],
            correctAnswer: 2,
            explanation: "When objects travel in opposite directions, their relative speed is the sum of their individual speeds."
        },
        {
            question: "What does a horizontal line on a distance-time graph indicate?",
            options: [
                "The object is accelerating",
                "The object is at rest (not moving)",
                "The object is moving at constant velocity",
                "The object is changing direction"
            ],
            correctAnswer: 1,
            explanation: "A flat, horizontal line on a distance-time graph means the object is at rest with a constant speed of zero."
        },
        {
            question: "What does the slope of a line on a distance-time graph represent?",
            options: [
                "Acceleration",
                "Distance",
                "Speed",
                "Time"
            ],
            correctAnswer: 2,
            explanation: "The slope of a line on a distance-time graph represents the speed of the object."
        },
        {
            question: "Describe a situation in which you can accelerate even though your speed doesn't change.",
            options: [
                "When you're standing still",
                "When you're moving in a circle at constant speed",
                "When you're moving in a straight line at constant speed",
                "When you're slowing down"
            ],
            correctAnswer: 1,
            explanation: "When moving in a circle at constant speed, your velocity is constantly changing direction (even though speed stays the same), which means you are accelerating."
        },
        {
            question: "A fly is walking on a wall. First it crawls 1 meter up, then 1 meter to the left, and then 1 meter down. What is its total displacement?",
            options: [
                "3 meters",
                "1 meter left",
                "0 meters",
                "√2 meters left-up"
            ],
            correctAnswer: 1,
            explanation: "Using vector addition: 1m up + 1m left + 1m down = 1m left (the upward and downward displacements cancel out)"
        },
        {
            question: "When two objects travel in the same direction, how do you find their relative speed?",
            options: [
                "Multiply their individual speeds",
                "Subtract their individual speeds",
                "Add their individual speeds",
                "Divide their individual speeds"
            ],
            correctAnswer: 1,
            explanation: "When objects travel in the same direction, their relative speed is the difference between their individual speeds."
        },
        {
            question: "What happens to the velocity of a ball thrown straight up in the air (ignoring air resistance)?",
            options: [
                "It remains constant throughout the motion",
                "It increases until the ball reaches its maximum height",
                "It decreases until the ball reaches its maximum height, then increases as it falls",
                "It increases as the ball falls only"
            ],
            correctAnswer: 2,
            explanation: "The ball's upward velocity decreases due to gravity until reaching zero at maximum height, then increases downward as it falls."
        },
        {
            question: "What is average speed?",
            options: [
                "The instantaneous speed at any moment",
                "The fastest speed achieved",
                "The ratio of total distance traveled to total time of trip",
                "The speed halfway through a journey"
            ],
            correctAnswer: 2,
            explanation: "Average speed is the ratio of the total distance traveled to the total time of the trip."
        }
    ];

    // Initialize quiz state after questions are defined
    window.currentQuestion = 0;
    window.userAnswers = new Array(questions.length).fill(null);
    window.questionAttempts = new Array(questions.length).fill(0);

    function startQuiz() {
        const emailInput = document.getElementById('email');
        const saveResults = document.getElementById('save-results');
        
        if (saveResults.checked && (!emailInput.value || !emailInput.value.includes('@'))) {
            alert('Please enter a valid email address or uncheck "Save results"');
            return;
        }

        window.userEmail = emailInput.value;
        window.saveResults = saveResults.checked;

        document.getElementById('email-section').style.display = 'none';
        document.getElementById('quiz-container').style.display = 'block';
        showQuestion();
    }

    function showQuestion() {
    const questionNumber = document.getElementById('question-number');
    const questionText = document.getElementById('question-text');
    const options = document.querySelector('.options');
    const feedback = document.getElementById('feedback');
    
    // Update progress bar
    const progressBar = document.querySelector('.progress-bar');
    progressBar.querySelector('.fill').style.width = `${((window.currentQuestion + 1) / questions.length) * 100}%`;
    
    // Update question number
    questionNumber.textContent = `Question ${window.currentQuestion + 1} of ${questions.length}`;
    
    // Update question text
    questionText.textContent = questions[window.currentQuestion].question;
    
    // Clear previous options and feedback
    options.innerHTML = '';
    feedback.className = 'feedback';
    feedback.textContent = '';
    
    // Create option buttons
    questions[window.currentQuestion].options.forEach((option, index) => {
        const button = document.createElement('button');
        button.className = 'option-button';
        button.textContent = option;
        button.onclick = () => selectAnswer(index);
        options.appendChild(button);
    });
    
    // Update navigation buttons
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const submitBtn = document.getElementById('submitBtn');
    
    prevBtn.style.display = window.currentQuestion > 0 ? 'block' : 'none';
    nextBtn.style.display = window.currentQuestion < questions.length - 1 ? 'block' : 'none';
    submitBtn.style.display = window.currentQuestion === questions.length - 1 ? 'block' : 'none';
    
    // If this question was already answered, show the previous answer
    if (window.userAnswers[window.currentQuestion] !== null) {
        const optionButtons = document.querySelectorAll('.option-button');
        const selectedOption = optionButtons[window.userAnswers[window.currentQuestion]];
        if (selectedOption) {
            selectedOption.classList.add('selected');
            if (window.userAnswers[window.currentQuestion] === questions[window.currentQuestion].correctAnswer) {
                selectedOption.classList.add('correct');
                feedback.className = 'feedback correct';
                feedback.textContent = questions[window.currentQuestion].explanation || '';
            }
        }
    }
}

    function selectAnswer(optionIndex) {
        const currentAttempts = window.questionAttempts[window.currentQuestion] || 0;
        const question = questions[window.currentQuestion];
        const options = document.querySelectorAll('.option-button');
        const feedback = document.getElementById('feedback');
        const nextBtn = document.getElementById('nextBtn');
        const submitBtn = document.getElementById('submitBtn');
        
        // If already answered correctly or max attempts reached, do nothing
        if ((window.userAnswers[window.currentQuestion] !== null && 
            optionIndex === question.correctAnswer) ||
            currentAttempts >= 2) {
            return;
        }
        
        // Increment attempts for this question
        window.questionAttempts[window.currentQuestion] = currentAttempts + 1;
        
        // Update user's answer
        window.userAnswers[window.currentQuestion] = optionIndex;
        
        // Remove selected class from all options
        options.forEach(option => option.classList.remove('selected', 'correct', 'incorrect'));
        
        // Add selected class to clicked option
        options[optionIndex].classList.add('selected');

        // Show feedback
        const isCorrect = optionIndex === question.correctAnswer;
        feedback.className = `feedback ${isCorrect ? 'correct' : 'incorrect'}`;
        
        if (isCorrect) {
            feedback.innerHTML = `
                <div>Correct!</div>
                <div class="reference">${question.explanation}</div>
            `;
            
            // Disable all options after correct answer and highlight the correct one
            options.forEach((option, index) => {
                option.disabled = true;
                if (index === question.correctAnswer) {
                    option.classList.add('correct');
                }
            });

            // Show next/submit button based on question number
            if (window.currentQuestion < questions.length - 1) {
                nextBtn.style.display = 'block';
                submitBtn.style.display = 'none';
            } else {
                nextBtn.style.display = 'none';
                submitBtn.style.display = 'block';
            }
        } else {
            if (currentAttempts + 1 >= 2) { // Check if this was the last attempt
                feedback.innerHTML = `
                    <div>Incorrect. The correct answer is: ${question.options[question.correctAnswer]}</div>
                    <div class="reference">${question.explanation}</div>
                `;
                
                // Disable all options and highlight correct answer
                options.forEach((option, index) => {
                    option.disabled = true;
                    if (index === question.correctAnswer) {
                        option.classList.add('correct');
                    }
                });

                // Show next/submit button based on question number
                if (window.currentQuestion < questions.length - 1) {
                    nextBtn.style.display = 'block';
                    submitBtn.style.display = 'none';
                } else {
                    nextBtn.style.display = 'none';
                    submitBtn.style.display = 'block';
                }
            } else {
                // Only disable the incorrect option
                options[optionIndex].disabled = true;
                options[optionIndex].classList.add('incorrect');
                feedback.innerHTML = `<div>Incorrect. Try again! (${2 - (currentAttempts + 1)} attempt${2 - (currentAttempts + 1) === 1 ? '' : 's'} remaining)</div>`;
                
                // Hide navigation buttons until correct answer or max attempts
                nextBtn.style.display = 'none';
                submitBtn.style.display = 'none';
            }
        }
        
        feedback.style.display = 'block';
    }

    function nextQuestion() {
        if (window.currentQuestion < questions.length - 1) {
            // Reset feedback and button states
            const feedback = document.getElementById('feedback');
            feedback.style.display = 'none';
            feedback.className = 'feedback';
            feedback.innerHTML = '';
            
            // Move to next question
            window.currentQuestion++;
            showQuestion();
        } else {
            showResults();
        }
    }

    function previousQuestion() {
        if (window.currentQuestion > 0) {
            // Reset feedback and button states
            const feedback = document.getElementById('feedback');
            feedback.style.display = 'none';
            feedback.className = 'feedback';
            feedback.innerHTML = '';
            
            // Move to previous question
            window.currentQuestion--;
            showQuestion();
        }
    }

    function showResults() {
        document.getElementById('quiz-container').style.display = 'none';
        const resultsDiv = document.getElementById('results');
        resultsDiv.style.display = 'block';
        
        const score = window.userAnswers.filter((answer, index) => answer === questions[index].correctAnswer).length;
        const scoreDiv = document.getElementById('score');
        
        scoreDiv.innerHTML = `
            <h3>Your Score: ${Math.round((score / questions.length) * 100)}%</h3>
            <p>You got ${score} out of ${questions.length} questions correct.</p>
        `;

        if (window.userAnswers.some((answer, index) => answer !== questions[index].correctAnswer)) {
            const incorrectAnswersDiv = document.getElementById('incorrect-answers');
            incorrectAnswersDiv.innerHTML = '<h3>Review Incorrect Answers:</h3>';
            
            window.userAnswers.forEach((answer, index) => {
                if (answer !== questions[index].correctAnswer) {
                    incorrectAnswersDiv.innerHTML += `
                        <div class="incorrect-answer">
                            <p><strong>Question:</strong> ${questions[index].question}</p>
                            <p class="wrong-answer"><strong>Your Answer:</strong> ${questions[index].options[answer]}</p>
                            <p class="right-answer"><strong>Correct Answer:</strong> ${questions[index].options[questions[index].correctAnswer]}</p>
                            <p><strong>Explanation:</strong> ${questions[index].explanation}</p>
                        </div>
                    `;
                }
            });
        }

        if (window.saveResults && window.userEmail) {
            sendResultsEmail();
        }
    }

    function sendResultsEmail() {
        try {
            const emailStatus = document.getElementById('email-status');
            const score = Math.round((window.userAnswers.filter((answer, index) => answer === questions[index].correctAnswer).length / questions.length) * 100);
            
            const templateParams = {
                to_email: window.userEmail,
                quiz_name: 'Module 6: Motion and Forces',
                score: score,
                total_questions: questions.length,
                correct_answers: window.userAnswers.filter((answer, index) => answer === questions[index].correctAnswer).length,
                incorrect_answers: window.userAnswers.map((answer, index) => 
                    `Question: ${questions[index].question}\nYour Answer: ${questions[index].options[answer]}\nCorrect Answer: ${questions[index].options[questions[index].correctAnswer]}\nExplanation: ${questions[index].explanation}`
                ).filter((item, index) => window.userAnswers[index] !== questions[index].correctAnswer).join('\n\n')
            };

            emailjs.send('YOUR_SERVICE_ID', 'YOUR_TEMPLATE_ID', templateParams);
            
            emailStatus.style.display = 'block';
            emailStatus.className = 'email-status success';
            emailStatus.textContent = 'Quiz results sent successfully!';
        } catch (error) {
            console.error('Failed to send email:', error);
            emailStatus.style.display = 'block';
            emailStatus.className = 'email-status error';
            emailStatus.textContent = 'Failed to send quiz results. Please try again.';
        }
    }

    function downloadResults() {
        const score = window.userAnswers.filter((answer, index) => answer === questions[index].correctAnswer).length;
        let content = `Module 6: Motion and Forces - Quiz Results\n\n`;
        content += `Score: ${Math.round((score / questions.length) * 100)}%\n`;
        content += `Correct Answers: ${score} out of ${questions.length}\n\n`;

        if (window.userAnswers.some((answer, index) => answer !== questions[index].correctAnswer)) {
            content += `Incorrect Answers Review:\n\n`;
            window.userAnswers.forEach((answer, index) => {
                if (answer !== questions[index].correctAnswer) {
                    content += `Question: ${questions[index].question}\n`;
                    content += `Your Answer: ${questions[index].options[answer]}\n`;
                    content += `Correct Answer: ${questions[index].options[questions[index].correctAnswer]}\n`;
                    content += `Explanation: ${questions[index].explanation}\n\n`;
                }
            });
        }

        const blob = new Blob([content], { type: 'text/plain' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'module6_quiz_results.txt';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
    }

    function restartQuiz() {
        window.currentQuestion = 0;
        window.userAnswers = new Array(questions.length).fill(null);
        window.questionAttempts = new Array(questions.length).fill(0);
        
        document.getElementById('email-section').style.display = 'block';
        document.getElementById('quiz-container').style.display = 'none';
        document.getElementById('results').style.display = 'none';
        document.getElementById('email-status').style.display = 'none';
        
        document.getElementById('email').value = '';
        document.getElementById('save-results').checked = true;
    }

    // Event listeners
    document.getElementById('start-quiz').addEventListener('click', startQuiz);
    document.getElementById('download-results').addEventListener('click', downloadResults);
    document.getElementById('restart-quiz').addEventListener('click', restartQuiz);
</script>
</Layout>
