---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Physical Science Module 1 Quiz">
    <div class="container">
        <h1>Physical Science Module 1 Quiz</h1>
        
        <div class="email-input" id="email-section">
            <label for="email">Enter your email (optional):</label>
            <input type="email" id="email" placeholder="your.email@example.com">
            <div>
                <input type="checkbox" id="save-results" checked>
                <label for="save-results">Save results and send to instructor</label>
            </div>
            <button class="control-button" id="start-quiz" onclick="startQuiz()">Start Quiz</button>
        </div>

        <div id="quiz-container" style="display: none;">
            <div class="progress-bar">
                <div class="fill" id="progress"></div>
            </div>
            <div id="question-number"></div>
            <div id="question-text"></div>
            <div class="options" id="options"></div>
            <div id="feedback" class="feedback"></div>
            <div class="controls">
                <button id="prevBtn" class="control-button" onclick="previousQuestion()" style="display: none;">Previous Question</button>
                <button id="nextBtn" class="control-button" onclick="nextQuestion()" style="display: none;">Next Question</button>
                <button id="submitBtn" class="control-button" onclick="submitQuiz()" style="display: none;">Submit Quiz</button>
            </div>
        </div>

        <div id="results" style="display: none;">
            <h2>Quiz Results</h2>
            <div id="score"></div>
            <div id="email-status" class="email-status"></div>
            <div id="incorrect-answers"></div>
            <div class="result-buttons">
                <button id="download-results" class="control-button">Download Results</button>
                <button id="restart-quiz" class="control-button" onclick="window.location.reload()">Restart Quiz</button>
            </div>
        </div>
    </div>

    <!-- Load EmailJS before initializing -->
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js" is:inline></script>
    <script type="text/javascript" is:inline>
        // Wait for EmailJS to load before initializing
        window.onload = function() {
            try {
                emailjs.init("la6DVzxI7W2gVEkX6");
            } catch (error) {
                console.error('Failed to initialize EmailJS:', error);
            }
        }
    </script>

    <script is:inline>
        // Define questions first
        window.questions = [
            {
                question: "What is the scientific method? (Introduction)",
                options: [
                    "A systematic approach to solving problems and understanding the natural world",
                    "A method only used in chemistry experiments",
                    "A way to organize laboratory equipment",
                    "A type of mathematical formula"
                ],
                correctAnswer: 0,
                reference: "Reference: Scientific Method"
            },
            {
                question: "What is the first step in the scientific method?",
                options: [
                    "Form a hypothesis",
                    "Make observations",
                    "Conduct experiments",
                    "Draw conclusions"
                ],
                correctAnswer: 1,
                reference: "Reference: Scientific Method"
            },
            {
                question: "What is a hypothesis?",
                options: [
                    "A proven scientific fact",
                    "The final result of an experiment",
                    "A testable prediction or explanation",
                    "A mathematical equation"
                ],
                correctAnswer: 2,
                reference: "Reference: Hypothesis"
            },
            {
                question: "What is a variable in an experiment?",
                options: [
                    "The final conclusion",
                    "A factor that can be changed or measured",
                    "The laboratory equipment used",
                    "The time taken to complete the experiment"
                ],
                correctAnswer: 1,
                reference: "Reference: Variables"
            },
            {
                question: "What is a control group in an experiment?",
                options: [
                    "The group that receives no treatment or the standard condition",
                    "The group with the most variables",
                    "The group that conducts the experiment",
                    "The group that analyzes the data"
                ],
                correctAnswer: 0,
                reference: "Reference: Control Group"
            }
        ];

        // Initialize quiz state after questions are defined
        window.currentQuestion = 0;
        window.userAnswers = new Array(window.questions.length).fill(null);
        window.userEmail = '';
        window.questionAttempts = new Array(window.questions.length).fill(0);

        function startQuiz() {
            const emailInput = document.getElementById('email');
            const saveResults = document.getElementById('save-results');
            
            if (saveResults.checked && !emailInput.value) {
                alert('Please enter your email address to save and send results.');
                return;
            }

            window.userEmail = emailInput.value;
            
            document.getElementById('email-section').style.display = 'none';
            document.getElementById('quiz-container').style.display = 'block';
            
            showQuestion();
            updateNavigation();
        }

        function showQuestion() {
            const question = window.questions[window.currentQuestion];
            document.getElementById('question-number').textContent = `Question ${window.currentQuestion + 1}/${window.questions.length}`;
            document.getElementById('question-text').textContent = question.question;
            
            const optionsContainer = document.getElementById('options');
            optionsContainer.innerHTML = '';
            
            question.options.forEach((option, index) => {
                const button = document.createElement('button');
                button.className = 'option-button';
                button.textContent = option;
                button.onclick = () => selectAnswer(index);
                if (window.userAnswers[window.currentQuestion] === index) {
                    button.classList.add('selected');
                }
                optionsContainer.appendChild(button);
            });

            // Update progress bar
            const progress = ((window.currentQuestion + 1) / window.questions.length) * 100;
            document.getElementById('progress').style.width = `${progress}%`;

            document.getElementById('feedback').textContent = '';
            document.getElementById('feedback').className = '';
        }

        function selectAnswer(optionIndex) {
            const currentAttempts = window.questionAttempts[window.currentQuestion] || 0;
            const question = window.questions[window.currentQuestion];
            const options = document.querySelectorAll('.option-button');
            const feedback = document.getElementById('feedback');
            const nextBtn = document.getElementById('nextBtn');
            const submitBtn = document.getElementById('submitBtn');
            
            // If already answered correctly or max attempts reached, do nothing
            if ((window.userAnswers[window.currentQuestion] !== null && 
                question.options[window.userAnswers[window.currentQuestion]] === question.correctAnswer) ||
                currentAttempts >= 2) {
                return;
            }
            
            // Increment attempts for this question
            window.questionAttempts[window.currentQuestion] = currentAttempts + 1;
            
            // Update user's answer
            window.userAnswers[window.currentQuestion] = optionIndex;
            
            // Remove selected class from all options
            options.forEach(option => option.classList.remove('selected', 'correct', 'incorrect'));
            
            // Add selected class to clicked option
            options[optionIndex].classList.add('selected');

            // Show feedback
            const selectedAnswer = question.options[optionIndex];
            const correctAnswer = question.options[question.correctAnswer];
            const isCorrect = selectedAnswer === correctAnswer;
            feedback.className = `feedback ${isCorrect ? 'correct' : 'incorrect'}`;
            
            if (isCorrect) {
                feedback.innerHTML = `
                    <div>Correct!</div>
                    <div class="reference">${question.reference}</div>
                `;
                
                // Disable all options after correct answer and highlight the correct one
                options.forEach((option, index) => {
                    option.disabled = true;
                    if (question.options[index] === correctAnswer) {
                        option.classList.add('correct');
                    }
                });

                // Show next/submit button based on question number
                if (window.currentQuestion < window.questions.length - 1) {
                    nextBtn.style.display = 'block';
                    submitBtn.style.display = 'none';
                } else {
                    nextBtn.style.display = 'none';
                    submitBtn.style.display = 'block';
                }
            } else {
                if (currentAttempts + 1 >= 2) { // Check if this was the last attempt
                    feedback.innerHTML = `
                        <div>Incorrect. The correct answer is: ${correctAnswer}</div>
                        <div class="reference">${question.reference}</div>
                    `;
                    
                    // Disable all options and highlight correct answer
                    options.forEach((option, index) => {
                        option.disabled = true;
                        if (question.options[index] === correctAnswer) {
                            option.classList.add('correct');
                        }
                    });

                    // Show next/submit button based on question number
                    if (window.currentQuestion < window.questions.length - 1) {
                        nextBtn.style.display = 'block';
                        submitBtn.style.display = 'none';
                    } else {
                        nextBtn.style.display = 'none';
                        submitBtn.style.display = 'block';
                    }
                } else {
                    // Only disable the incorrect option
                    options[optionIndex].disabled = true;
                    options[optionIndex].classList.add('incorrect');
                    feedback.innerHTML = `<div>Incorrect. Try again! (${2 - (currentAttempts + 1)} attempt${2 - (currentAttempts + 1) === 1 ? '' : 's'} remaining)</div>`;
                    
                    // Hide navigation buttons until correct answer or max attempts
                    nextBtn.style.display = 'none';
                    submitBtn.style.display = 'none';
                }
            }
            
            feedback.style.display = 'block';
        }

        function nextQuestion() {
            if (window.currentQuestion < window.questions.length - 1) {
                // Reset feedback and button states
                const feedback = document.getElementById('feedback');
                feedback.style.display = 'none';
                feedback.className = 'feedback';
                feedback.innerHTML = '';
                
                // Move to next question
                window.currentQuestion++;
                showQuestion();
            } else {
                showResults();
            }
        }

        function previousQuestion() {
            if (window.currentQuestion > 0) {
                // Reset feedback and button states
                const feedback = document.getElementById('feedback');
                feedback.style.display = 'none';
                feedback.className = 'feedback';
                feedback.innerHTML = '';
                
                // Move to previous question
                window.currentQuestion--;
                showQuestion();
            }
        }

        function updateNavigation() {
            const prevButton = document.getElementById('prevBtn');
            const nextButton = document.getElementById('nextBtn');
            const submitButton = document.getElementById('submitBtn');
            
            prevButton.style.display = window.currentQuestion > 0 ? 'block' : 'none';
            nextButton.style.display = window.currentQuestion < window.questions.length - 1 ? 'block' : 'none';
            submitButton.style.display = window.currentQuestion === window.questions.length - 1 && window.userAnswers[window.currentQuestion] !== null ? 'block' : 'none';
        }

        function submitQuiz() {
            const score = window.userAnswers.reduce((total, answer, index) => {
                return total + (answer === window.questions[index].correctAnswer ? 1 : 0);
            }, 0);

            const saveResults = document.getElementById('save-results');
            const email = window.userEmail;

            document.getElementById('quiz-container').style.display = 'none';
            document.getElementById('results').style.display = 'block';

            const scorePercentage = ((score / window.questions.length) * 100).toFixed(1);
            document.getElementById('score').innerHTML = `
                <p>You scored ${score} out of ${window.questions.length} (${scorePercentage}%)</p>
            `;

            if (saveResults && saveResults.checked && email) {
                let emailMessage = `Score: ${score} out of ${window.questions.length} (${scorePercentage}%)\n\n`;
                
                const incorrectAnswers = window.userAnswers.reduce((incorrect, answer, index) => {
                    if (answer !== window.questions[index].correctAnswer) {
                        incorrect.push({
                            question: window.questions[index].question,
                            userAnswer: window.questions[index].options[answer],
                            correctAnswer: window.questions[index].options[window.questions[index].correctAnswer],
                            attempts: window.questionAttempts[index]
                        });
                    }
                    return incorrect;
                }, []);

                if (incorrectAnswers.length > 0) {
                    emailMessage += "Incorrect Answers:\n\n";
                    incorrectAnswers.forEach((item, index) => {
                        emailMessage += `${index + 1}. ${item.question}\n`;
                        emailMessage += `   Your answer: ${item.userAnswer}\n`;
                        emailMessage += `   Correct answer: ${item.correctAnswer}\n`;
                        emailMessage += `   Attempts: ${item.attempts}\n\n`;
                    });
                }

                const templateParams = {
                    to_email: email,
                    message: emailMessage,
                    score: score,
                    total: window.questions.length,
                    percentage: scorePercentage
                };

                emailjs.send('service_x0pn4yo', 'template_1e8d3yq', templateParams)
                    .then(function(response) {
                        console.log('Email sent:', response);
                    }, function(error) {
                        console.error('Email error:', error);
                    });
            }

            showFinalResults();
        }

        function showFinalResults() {
            const detailedResults = document.getElementById('incorrect-answers');
            let resultsHTML = '<h3>Detailed Results:</h3>';

            window.questions.forEach((question, index) => {
                const userAnswer = window.userAnswers[index];
                const isCorrect = userAnswer === question.correctAnswer;
                const attempts = window.questionAttempts[index];

                resultsHTML += `
                    <div class="question-result ${isCorrect ? 'correct' : 'incorrect'}">
                        <p><strong>Question ${index + 1}:</strong> ${question.question}</p>
                        <p>Your answer: ${question.options[userAnswer]}</p>
                        ${!isCorrect ? `<p>Correct answer: ${question.options[question.correctAnswer]}</p>` : ''}
                        <p>Attempts: ${attempts}</p>
                    </div>
                `;
            });

            detailedResults.innerHTML = resultsHTML;
        }
    </script>

    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .email-input {
            margin-bottom: 20px;
        }
        .email-input label {
            display: block;
            margin-bottom: 10px;
        }
        .email-input input[type="email"] {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
        }
        .email-input input[type="checkbox"] {
            margin-right: 10px;
        }
        .control-button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: white;
            cursor: pointer;
        }
        .control-button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
        .progress-bar {
            width: 100%;
            height: 20px;
            background-color: #f0f0f0;
            border-radius: 10px;
            margin-bottom: 20px;
            overflow: hidden;
        }
        .fill {
            height: 100%;
            background-color: #4CAF50;
            transition: width 0.3s ease-in-out;
        }
        #question-number {
            font-weight: bold;
            margin-bottom: 10px;
        }
        #question-text {
            font-size: 1.1em;
            margin-bottom: 20px;
        }
        .options {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin: 20px 0;
        }
        .option-button {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: white;
            cursor: pointer;
            text-align: left;
            transition: all 0.2s;
        }
        .option-button:hover {
            background-color: #f0f0f0;
        }
        .option-button.selected {
            background-color: #e3f2fd;
            border-color: #2196F3;
        }
        .option-button.correct {
            background-color: #d4edda;
            border-color: #c3e6cb;
            color: #155724;
        }
        .option-button.incorrect {
            background-color: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }
        .option-button:disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }
        .feedback {
            margin: 10px 0;
            padding: 15px;
            border-radius: 5px;
            display: none;
        }
        .feedback.correct {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .feedback.incorrect {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .feedback .reference {
            margin-top: 8px;
            font-style: italic;
            font-size: 0.9em;
        }
        .controls {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        .control-button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: white;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .control-button:hover {
            background-color: #0056b3;
        }
        .control-button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
        .result-buttons {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        .email-status {
            margin: 10px 0;
            padding: 10px;
            border-radius: 5px;
        }
        .email-status.success {
            background-color: #d4edda;
            color: #155724;
        }
        .email-status.error {
            background-color: #f8d7da;
            color: #721c24;
        }
        .question-result {
            margin-bottom: 20px;
            padding: 15px;
            border-radius: 5px;
        }
        .question-result.correct {
            background-color: #d4edda;
        }
        .question-result.incorrect {
            background-color: #f8d7da;
        }
    </style>
</Layout>
